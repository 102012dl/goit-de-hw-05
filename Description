Опис виконаної роботи - Домашнє завдання до теми «Apache Kafka»
Вступ
Це домашнє завдання спрямоване на практичне застосування Apache Kafka за допомогою Python API. Проект моделює систему моніторингу для IoT пристроїв, яка обробляє дані від датчиків, що вимірюють температуру та вологість у різних будівлях. Система використовує Kafka для збору, обробки та аналізу даних у реальному часі.
Архітектура системи
Система складається з 4 основних компонентів:

Створення топіків - налаштування необхідних каналів комунікації в Kafka
Генерація даних датчиків - імітація роботи IoT пристроїв
Обробка та фільтрація даних - аналіз отриманих даних та виявлення аномалій
Обробка сповіщень - відображення важливих подій системи

Етапи виконання завдання
1. Створення топіків в Kafka
Для роботи системи було створено три топіки з використанням Python API Kafka:

ihor_building_sensors - для зберігання даних з усіх датчиків
ihor_temperature_alerts - для сповіщень про перевищення температури
ihor_humidity_alerts - для сповіщень про аномалії вологості

Реалізація створення топіків виконана у скрипті create_topics.py, який використовує клас KafkaAdminClient для адміністрування топіків. До імен додано унікальний ідентифікатор для уникнення конфліктів.

2. Відправка даних до топіків
Для імітації роботи датчиків було розроблено скрипт sensor_producer.py, який:

Генерує унікальний ідентифікатор датчика при запуску
Періодично (кожні 5 секунд) створює випадкові значення показників:

Температура: випадкова величина від 25 до 45°C
Вологість: випадкова величина від 15 до 85%


Відправляє дані до топіку ihor_building_sensors у форматі JSON
Для імітації різних датчиків скрипт можна запустити декілька разів одночасно


3. Обробка даних
Скрипт data_processor.py відповідає за обробку та фільтрацію вхідних даних:

Підписується на топік ihor_building_sensors
Аналізує кожне отримане повідомлення і перевіряє на відповідність критеріям:

Температура > 40°C - критична температура
Вологість > 80% або < 20% - критична вологість


При виявленні аномалій створює відповідні сповіщення
Відправляє сповіщення у відповідні топіки (ihor_temperature_alerts або ihor_humidity_alerts)

Кожне сповіщення містить:

ID датчика
Значення показника (температура або вологість)
Часова мітка виявлення аномалії
Текстове повідомлення про тип аномалії


4. Відображення сповіщень
Скрипт alert_consumer.py призначений для моніторингу сповіщень:

Підписується одночасно на два топіки: ihor_temperature_alerts та ihor_humidity_alerts
Отримує та десеріалізує сповіщення з JSON формату
Визначає тип сповіщення за назвою топіка
Форматує та виводить інформацію про аномалії на екран у зручному для читання вигляді

[Місце для скриншоту виведення сповіщень на екран]
Підсумок
Реалізована система дозволяє ефективно:

Збирати дані з різних датчиків
Обробляти ці дані в реальному часі
Виявляти аномалії та створювати відповідні сповіщення
Відслідковувати важливі події системи

Система демонструє основні можливості Apache Kafka як платформи для обробки потокових даних, забезпечуючи:

Масштабованість - можливість підключення багатьох датчиків
Надійність - гарантована доставка повідомлень
Розподіленість - розділення системи на логічні компоненти
Швидкодію - обробка даних у реальному часі

Домашнє завдання виконано з використанням бібліотеки kafka-python для взаємодії з Apache Kafka з Python та стандартних бібліотек Python для обробки даних.
